<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache.xsd
	">


    <context:property-placeholder location="classpath:jdbc.properties,classpath:druid.properties" />

    <!--<bean id="user" class="com.model.User"/>-->
    <!--引入aspectj注解支持-->
    <aop:aspectj-autoproxy/>

    <!--AOP测试-->
    <!--一定要把切入点语法写对了-->
    <!--AOP需要的Jar包要导入全-->
   <!-- <aop:config >
        <aop:pointcut id="pointcut" expression="execution(* com.aop..*.write(..))"/>
        &lt;!&ndash;这个args中的参数和方法中的参数名称是要对应的&ndash;&gt;
        <aop:pointcut id="pointcutWithArgs" expression="execution(* com.aop..*.writeSong(..)) and args(args)"/>

        <aop:aspect ref="aspectOfWrite">
            <aop:before pointcut-ref="pointcut" method="before"/>
            &lt;!&ndash;这块为了举例子所以把pointcut的expression又重新写了一遍&ndash;&gt;
            <aop:after pointcut="execution(* com.aop.schema.WriteJava.write(..))" method="afterFinally"/>
            <aop:before method="beforeWithArgs" pointcut-ref="pointcutWithArgs"/>
            <aop:after method="afterWithArgs" pointcut-ref="pointcutWithArgs"/>
            <aop:after-throwing method="afterThrowing" pointcut="execution(* com.aop..*.writeException(..)) and args(args)"/>
            <aop:after-returning method="afterReturning" pointcut="execution(* com.aop..*.writeReturn(..))"/>
            <aop:around method="around" pointcut="execution(* com.aop..*.writeAround(..))" />
            &lt;!&ndash;为对象引入新接口&ndash;&gt;
        </aop:aspect>
    </aop:config>-->

    <!-- 创建数据源 并且使用proxool数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">

        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="${druid.validationQuery}"/>
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <property name="testOnReturn" value="${druid.testOnReturn}"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}"/>
    </bean>

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <!--自动扫描mapper-->
    <property name="mapperLocations" value="classpath:com/mapping/*.xml"/>
    <!--该属性可以给包中的类注册别名，注册后可以直接使用类名，而不用使用全限定的类名（就是不用包含包名）。-->
    <property name="typeAliasesPackage" value="com/model"/>

</bean>

<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="com.dao"/>
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
</bean>

</beans>